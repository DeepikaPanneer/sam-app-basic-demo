# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: >
#   sam-app

#   Sample SAM Template for sam-app

# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     Timeout: 3
#     MemorySize: 128

# Resources:
#   HelloWorldFunction:
#     Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#     Properties:
#       CodeUri: hello_world/
#       Handler: app.lambda_handler
#       Runtime: python3.9
#       Architectures:
#         - x86_64
#       Events:
#         HelloWorld:
#           Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#           Properties:
#             Path: /hello
#             Method: get

# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn


AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  SAM Template for an existing Lambda function and S3 file upload.

Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:
  ExistingLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda_function.py  # Replace with the actual name of your Lambda function
      CodeUri: ./emr/lambda/lambda_function.py # Update with the correct path to your Lambda code
      Handler: lambda_function.lambda_handler  # Ensure this matches your functionâ€™s handler
      Runtime: python3.9  # Update if your Lambda uses a different runtime
      Architectures:
        - x86_64

  S3FileUploader:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tech-tools-emr-studio1  # Replace with the name of your existing S3 bucket
    # Ensure the following section is included to upload the file to the bucket
  FileUpload:
    Type: AWS::S3::Object
    Properties:
      Bucket: tech-tools-emr-studio1  # Replace with the bucket name
      Key: bootstrap_actions/bootstrap_scripts.sh  # Replace with the key (path) of the file in the bucket
      Source: ./emr/bootstrap_scripts.sh # Replace with the path to the file you want to upload

Outputs:
  LambdaFunctionArn:
    Description: "Existing Lambda Function ARN"
    Value: !GetAtt ExistingLambdaFunction.Arn
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/your-endpoint/"
  LambdaFunctionIamRole:
    Description: "IAM Role for the existing Lambda function"
    Value: !GetAtt ExistingLambdaFunctionRole.Arn
  S3Bucket:
    Description: "Existing S3 Bucket Name"
    Value: !Ref S3FileUploader
